 # BankAccount should have a method that returns a user's account number, account number
 # should be generated by a private method, account number should be random
 # BankAccount should have a method that returns the user's checking account balance
 # BankAccount should have a method that returns the user's saving account balance
 # BankAccount should allow a user to deposit money into either their checking or saving account
 # BankAccount should allow a user to withdraw money from one of their accounts,
 # return a error if there are insufficient funds
 # BankAccount should allow the user to view the total amount of money they have at the bank
 # BankAccount should track how many accounts the bank currently has, attribute should be of the class
 # BankAccount should have a private attribute called interest rate that is only
 # displayed when the user calls the method account_information
 # BankAccount should have a method called account_information that displays the users
 # account number, total money, checking account balance, saving account balance and interest rate
 # A user should not be able to set any attributes from the BankAccount class
 class BankAccount
   @@num_accounts = 0

   def initialize
     @account_number = create_account()
     @checking_balance = 100
     @savings_balance = 50
     @@num_accounts += 1
     @interest_rate = 0.015

   end

   def num_of_accounts
     puts @@num_accounts
   end

   def display_account
     puts @account_number

   end

   def get_checking
     @checking_balance
   end

   def get_savings
     @savings_balance
   end

   def deposit (amount, account)
     if account == "savings"
       @savings_balance += amount
     else
       @checking_balance += amount
     end
     self
   end

   def withdraw (amount, account)
     if account == "savings"
       unless @savings_balance - amount < 0
         @savings_balance -= amount
       else
         puts "Insufficient Funds"
       end
     else
       unless @checking_balance - amount < 0
         @checking_balance -= amount
       else
         puts "Insufficient Funds"
       end
     end
     self
   end

   def display_balance
     puts "Total: $#{@checking_balance + @savings_balance}"
   end


   private
   def create_account
     acct = ""
     10.times {acct += rand(9).to_s}
     acct

   end

 end

 ba1 = BankAccount.new
 ba2 = BankAccount.new
 ba1.display_account
 puts ba1.get_checking
 puts ba1.get_savings
 puts ba1.withdraw(100, "savings").display_balance
 puts ba1.interest_rate
